buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.70-eap-274'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.61'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url "https://kotlin.bintray.com/kotlin-js-wrappers/" }
    maven { url 'https://dl.bintray.com/serpro69/maven/' }
    mavenCentral()
}
def ktor_version = '1.3.1'
def logback_version = '1.2.3'
def serialization_version = '0.20.0-1.3.70-eap-274'

kotlin {
    jvm()
    js {
        useCommonJs()
        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "io.ktor:ktor-websockets:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation 'io.github.serpro69:kotlin-faker:1.1'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "io.ktor:ktor-server-test-host:$ktor_version"
            }
        }
        jsMain {
            dependencies {
                // React
                implementation "org.jetbrains:kotlin-react:16.13.0-pre.92-kotlin-1.3.61"
                implementation "org.jetbrains:kotlin-react-dom:16.13.0-pre.92-kotlin-1.3.61"
                implementation 'org.jetbrains:kotlin-react-router-dom:4.3.1-pre.70-kotlin-1.3.21'
                implementation npm("react", "16.13.0")
                implementation npm("react-dom", "16.13.0")
                implementation npm("react-router", "4.3.1")

                // StyledComponents
                implementation "org.jetbrains:kotlin-styled:1.0.0-pre.90-kotlin-1.3.61"
                implementation npm("styled-components", "5.0.1")
                implementation npm("inline-style-prefixer", "5.1.2")

                // Serialization
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"

                // Moment.js
                implementation(npm("moment-locales-webpack-plugin", "1.1.2"))
                implementation(npm("moment", "2.24.0"))
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

jvmJar {
    dependsOn(jsBrowserProductionWebpack)
    from(new File(jsBrowserProductionWebpack.entry.name, jsBrowserProductionWebpack.outputPath))
}

task run(type: JavaExec, dependsOn: [jvmJar]) {
    group = "application"
    main = "io.ktor.server.netty.EngineMain"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
}

task shadowJar(type: ShadowJar, dependsOn: [jvmJar]) {
    from jvmJar.archiveFile
    configurations = [project.configurations.jvmRuntimeClasspath]
    manifest {
        attributes 'Main-Class': 'io.ktor.server.netty.EngineMain'
    }
}
